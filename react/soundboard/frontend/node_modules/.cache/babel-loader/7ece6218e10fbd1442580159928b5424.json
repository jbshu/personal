{"ast":null,"code":"import _classCallCheck from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _assertThisInitialized from \"/home/jack/personal/react/soundboard/frontend/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nvar _jsxFileName = \"/home/jack/personal/react/soundboard/frontend/src/SoundboardSquare.js\";\nimport React, { Component } from \"react\";\nimport \"./SoundboardSquare.css\";\n\nvar SoundboardSquare =\n/*#__PURE__*/\nfunction (_Component) {\n  _inherits(SoundboardSquare, _Component);\n\n  function SoundboardSquare(props) {\n    var _this;\n\n    _classCallCheck(this, SoundboardSquare);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SoundboardSquare).call(this, props));\n    _this.state = {\n      soundURL: '',\n      fileName: '',\n      volume: 100\n    };\n    _this.handleUploadSound = _this.handleUploadSound.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.volumeChange = _this.volumeChange.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    _this.playSound = _this.playSound.bind(_assertThisInitialized(_assertThisInitialized(_this)));\n    return _this;\n  }\n\n  _createClass(SoundboardSquare, [{\n    key: \"handleUploadSound\",\n    value: function handleUploadSound(e) {\n      var _this2 = this;\n\n      e.preventDefault();\n      var data = new FormData();\n      data.append('file', this.uploadInput.files[0]);\n      data.append('filename', this.fileName.value);\n      this.setState({\n        fileName: this.fileName.value\n      });\n      fetch('http://localhost:8000/upload', {\n        method: 'POST',\n        body: data\n      }).then(function (response) {\n        response.json().then(function (body) {\n          _this2.setState({\n            soundURL: \"http://localhost:8000/\".concat(body.file)\n          });\n        });\n      });\n      e.preventDefault();\n    }\n  }, {\n    key: \"volumeChange\",\n    value: function volumeChange(val) {\n      this.setState({\n        volume: val\n      });\n    }\n  }, {\n    key: \"playSound\",\n    value: function playSound() {\n      var audio = new Audio(this.state.soundURL);\n      audio.volume = this.state.volume;\n      audio.play();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this3 = this;\n\n      var chooser;\n\n      if (this.state.fileName !== '') {\n        chooser = React.createElement(\"p\", {\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 52\n          },\n          __self: this\n        }, this.state.filename);\n      } else {\n        chooser = React.createElement(\"div\", {\n          id: \"chooser\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 55\n          },\n          __self: this\n        }, React.createElement(\"div\", {\n          id: \"upload-sound-border\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 56\n          },\n          __self: this\n        }, React.createElement(\"label\", {\n          id: \"upload-sound-label\",\n          for: \"upload-sound\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 57\n          },\n          __self: this\n        }, \"Choose sound\"), React.createElement(\"input\", {\n          id: \"upload-sound\",\n          type: \"file\",\n          ref: function ref(_ref) {\n            _this3.uploadInput = _ref;\n          },\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 58\n          },\n          __self: this\n        })), React.createElement(\"div\", {\n          id: \"sound-name-border\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 60\n          },\n          __self: this\n        }, React.createElement(\"input\", {\n          id: \"sound-name\",\n          ref: function ref(_ref2) {\n            _this3.value = _ref2;\n          },\n          type: \"text\",\n          placeholder: \"Sound name\",\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 61\n          },\n          __self: this\n        })));\n      }\n\n      return React.createElement(\"div\", {\n        className: \"squareMain\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 67\n        },\n        __self: this\n      }, React.createElement(\"form\", {\n        onSubmit: this.handleUploadSound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 68\n        },\n        __self: this\n      }, chooser, React.createElement(\"div\", {\n        id: \"buttons-border\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70\n        },\n        __self: this\n      }, React.createElement(\"button\", {\n        id: \"upload\",\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 71\n        },\n        __self: this\n      }, \"Upload\"), React.createElement(\"button\", {\n        type: \"button\",\n        id: \"play\",\n        onClick: this.playSound,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72\n        },\n        __self: this\n      }, \"Play \", this.state.fileName))), React.createElement(VolumeSlider, {\n        style: styles.slider,\n        thumbSize: {\n          width: 8,\n          height: 8\n        },\n        thumbTintColor: \"rgb(146,146,157)\",\n        minimumTrackTintColor: \"rgb(146,146,157)\",\n        maximumTrackTintColor: \"rgba(255,255,255, 0.1)\",\n        showsRouteButton: true,\n        onValueChange: this.volumeChange.bind(this),\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 75\n        },\n        __self: this\n      }));\n    }\n  }]);\n\n  return SoundboardSquare;\n}(Component);\n\n;\nexport default SoundboardSquare;","map":{"version":3,"sources":["/home/jack/personal/react/soundboard/frontend/src/SoundboardSquare.js"],"names":["React","Component","SoundboardSquare","props","state","soundURL","fileName","volume","handleUploadSound","bind","volumeChange","playSound","e","preventDefault","data","FormData","append","uploadInput","files","value","setState","fetch","method","body","then","response","json","file","val","audio","Audio","play","chooser","filename","ref","styles","slider","width","height"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport \"./SoundboardSquare.css\";\n\nclass SoundboardSquare extends Component {\n  constructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state= {\n      soundURL: '',\n      fileName: '',\n      volume: 100,\n\t\t};\n\n    this.handleUploadSound= this.handleUploadSound.bind(this);\n    this.volumeChange= this.volumeChange.bind(this);\n    this.playSound= this.playSound.bind(this);\n\t}\n\n\thandleUploadSound(e) {\n\t\te.preventDefault();\n\n\t\tconst data= new FormData();\n\t\tdata.append('file', this.uploadInput.files[0]);\n\t\tdata.append('filename', this.fileName.value);\n\n    this.setState( {fileName:this.fileName.value} );\n\t\tfetch('http://localhost:8000/upload', {\n\t\t\tmethod: 'POST',\n\t\t\tbody: data,\n\t\t}).then((response) => {\n\t\t\tresponse.json().then((body) => {\n\t\t\t\tthis.setState({ soundURL: `http://localhost:8000/${body.file}` });\n\t\t\t});\n    });\n    \n    e.preventDefault();\n\t}\n\n  volumeChange(val) {\n    this.setState( {volume: val});\n  }\n\n  playSound() {\n    var audio= new Audio(this.state.soundURL);\n    audio.volume= this.state.volume;\n    audio.play();\n  }\n\n  render() {\n    let chooser;\n    if (this.state.fileName !== '') {\n      chooser= <p>{this.state.filename}</p>;\n    }\n    else {\n      chooser= <div id= \"chooser\">\n                  <div id=\"upload-sound-border\">\n                  <label id=\"upload-sound-label\" for=\"upload-sound\">Choose sound</label>\n                      <input id=\"upload-sound\" type=\"file\" ref= {(ref) => { this.uploadInput= ref; }}/>\n                  </div>\n                  <div id=\"sound-name-border\">\n                    <input id= \"sound-name\" ref={(ref) => { this.value = ref; }} type=\"text\" placeholder=\"Sound name\"/>\n                  </div>\n                </div>;  \n    }\n\n    return (\n      <div className=\"squareMain\">\n          <form onSubmit= {this.handleUploadSound}>\n          {chooser}\n            <div id=\"buttons-border\">\n              <button id=\"upload\">Upload</button>\n              <button type=\"button\" id=\"play\" onClick= {this.playSound}>Play { this.state.fileName }</button>\n            </div>\n          </form>\n          <VolumeSlider\n          style={styles.slider}\n          thumbSize={{\n            width: 8,\n            height: 8\n          }}\n          thumbTintColor=\"rgb(146,146,157)\"\n          minimumTrackTintColor=\"rgb(146,146,157)\"\n          maximumTrackTintColor=\"rgba(255,255,255, 0.1)\"\n          showsRouteButton={true}\n          onValueChange={this.volumeChange.bind(this)} />\n      </div>\n    );\n  }\n};\n\nexport default SoundboardSquare;\n"]},"metadata":{},"sourceType":"module"}